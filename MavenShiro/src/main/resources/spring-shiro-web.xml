<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"

       xmlns:util="http://www.springframework.org/schema/util"

       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       xsi:schemaLocation="

       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd

       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

 

    <!-- 缓存管理器，使用Ehcache实现 -->

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">

        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>

    </bean>

 

    <!-- 凭证匹配器，验证密码是否正确，用 下面的类去验证-->

    <bean id="credentialsMatcher" class="sdibt.fight.util.RetryLimitHashedCredentialsMatcher">

        <constructor-arg ref="cacheManager"/>

        <property name="hashAlgorithmName" value="md5"/>

        <property name="hashIterations" value="2"/>

        <property name="storedCredentialsHexEncoded" value="true"/>

    </bean>

 

    <!-- Realm实现 -->

    <bean id="userRealm" class="sdibt.fight.util.UserRealm">

        <property name="sysUserService" ref="sysUserService"/>

        <property name="credentialsMatcher" ref="credentialsMatcher"/>

        <!-- 启用缓存 -->

        <property name="cachingEnabled" value="true"/>

        <!-- 启用身份验证缓存，即缓存AuthenticationInfo信息 -->

        <property name="authenticationCachingEnabled" value="false"/>

        <!-- 缓存AuthenticationInfo信息的缓存名称 -->

        <property name="authenticationCacheName" value="authenticationCache"/>

        <!-- 启用授权缓存，即缓存AuthorizationInfo信息 -->

        <property name="authorizationCachingEnabled" value="true"/>

        <!-- 缓存AuthorizationInfo信息的缓存名称 -->

        <property name="authorizationCacheName" value="authorizationCache"/>

    </bean>

 

    <!-- 会话ID生成器 -->

    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

 

    <!-- 会话Cookie模板 -->

    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">

        <constructor-arg value="sid"/>

        <property name="httpOnly" value="true"/>

        <!-- maxAge=-1表示浏览器关闭时失效此Cookie -->

        <property name="maxAge" value="-1"/>

    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">

        <constructor-arg value="rememberMe"/>

        <property name="httpOnly" value="true"/>

        <!-- 单位为s-->

        <property name="maxAge" value="1800"/>

    </bean>

 

    <!-- rememberMe管理器 -->

    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">

        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->

        <property name="cipherKey"

                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>

        <property name="cookie" ref="rememberMeCookie"/>

    </bean>

    

    <bean id="formAuthenticationFilter"   

		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">  

    	<property name="rememberMeParam" value="rememberMe"/>  

	</bean>

 

    <!-- 会话DAO -->

    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">

        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>

        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>

    </bean>

 

    <!-- 会话验证调度器 -->

    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">

        <property name="sessionValidationInterval" value="1800000"/>

        <property name="sessionManager" ref="sessionManager"/>

    </bean>

 

    <!-- 会话管理器 -->

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">

        <property name="globalSessionTimeout" value="1800000"/>

        <property name="deleteInvalidSessions" value="true"/>

        <property name="sessionValidationSchedulerEnabled" value="true"/>

        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>

        <property name="sessionDAO" ref="sessionDAO"/>

        <property name="sessionIdCookieEnabled" value="true"/>

        <property name="sessionIdCookie" ref="sessionIdCookie"/>

    </bean>

 

    <!-- 安全管理器 -->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">

        <property name="realm" ref="userRealm"/>

        <property name="sessionManager" ref="sessionManager"/>

        <property name="cacheManager" ref="cacheManager"/>

        <property name="rememberMeManager" ref="rememberMeManager"/>

    </bean>

 

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->

    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">

        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>

        <property name="arguments" ref="securityManager"/>

    </bean>

 

     

 

    <!-- Shiro的Web过滤器 -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <property name="securityManager" ref="securityManager"/>

        <property name="loginUrl" value="/login.jsp"/>

        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>

        <property name="filterChainDefinitions">

        	<value>

        		<!-- 对于过滤器，一般这样使用：

				访问一般网页，如个人在主页之类的，我们使用user拦截器即可，user拦截器只要用户登录

				(isRemembered()==true or isAuthenticated()==true)过即可访问成功

				访问特殊网页，如我的订单，提交订单页面，我们使用authc拦截器即可，authc拦截器会判断用户是否是通过

				Subject.login（isAuthenticated()==true）登录的，如果是才放行，否则会跳转到登录页面叫你重新登录 -->

            	/login.jsp = anon

                /sysUser/doLogin = anon

                /**=user

               

            </value>

        </property>

    </bean>

 

    <!-- Shiro生命周期处理器-->

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

 

</beans>
